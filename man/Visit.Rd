% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visit.R
\docType{class}
\name{Visit}
\alias{Visit}
\title{Visit}
\format{
An \code{R6Class} generator object
}
\description{
Visit Class

Visit Class
}
\details{
Create a new Visit
}
\examples{

## ------------------------------------------------
## Method `Visit$toList`
## ------------------------------------------------

# convert array of Visit (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{studyKey}}{Unique study key character [optional]}

\item{\code{visitId}}{Unique system identifier for the subject visit instance integer [optional]}

\item{\code{intervalId}}{Unique system identifier of the interval definition for this visit integer [optional]}

\item{\code{intervalName}}{Name of the interval (visit) for this visit instance character [optional]}

\item{\code{subjectId}}{Mednet subject ID of the subject integer [optional]}

\item{\code{subjectKey}}{Protocol-assigned subject identifier character [optional]}

\item{\code{startDate}}{Start date of the visit window (in YYYY-MM-DD format) character [optional]}

\item{\code{endDate}}{End date of the visit window (in YYYY-MM-DD format) character [optional]}

\item{\code{dueDate}}{Due date of the visit (in YYYY-MM-DD format), if applicable character [optional]}

\item{\code{visitDate}}{Actual date the visit took place (in YYYY-MM-DD format) character [optional]}

\item{\code{visitDateForm}}{Name of the form used to capture the actual visit date character [optional]}

\item{\code{visitDateQuestion}}{Variable name of the field capturing the actual visit date character [optional]}

\item{\code{deleted}}{Whether the visit instance is marked as deleted character [optional]}

\item{\code{dateCreated}}{Date when this visit record was created character [optional]}

\item{\code{dateModified}}{Date when this visit record was last modified character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Visit-new}{\code{Visit$new()}}
\item \href{#method-Visit-toJSON}{\code{Visit$toJSON()}}
\item \href{#method-Visit-toList}{\code{Visit$toList()}}
\item \href{#method-Visit-toSimpleType}{\code{Visit$toSimpleType()}}
\item \href{#method-Visit-fromJSON}{\code{Visit$fromJSON()}}
\item \href{#method-Visit-toJSONString}{\code{Visit$toJSONString()}}
\item \href{#method-Visit-fromJSONString}{\code{Visit$fromJSONString()}}
\item \href{#method-Visit-validateJSON}{\code{Visit$validateJSON()}}
\item \href{#method-Visit-toString}{\code{Visit$toString()}}
\item \href{#method-Visit-isValid}{\code{Visit$isValid()}}
\item \href{#method-Visit-getInvalidFields}{\code{Visit$getInvalidFields()}}
\item \href{#method-Visit-print}{\code{Visit$print()}}
\item \href{#method-Visit-clone}{\code{Visit$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-new"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Visit class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$new(
  studyKey = NULL,
  visitId = NULL,
  intervalId = NULL,
  intervalName = NULL,
  subjectId = NULL,
  subjectKey = NULL,
  startDate = NULL,
  endDate = NULL,
  dueDate = NULL,
  visitDate = NULL,
  visitDateForm = NULL,
  visitDateQuestion = NULL,
  deleted = NULL,
  dateCreated = NULL,
  dateModified = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{studyKey}}{Unique study key}

\item{\code{visitId}}{Unique system identifier for the subject visit instance}

\item{\code{intervalId}}{Unique system identifier of the interval definition for this visit}

\item{\code{intervalName}}{Name of the interval (visit) for this visit instance}

\item{\code{subjectId}}{Mednet subject ID of the subject}

\item{\code{subjectKey}}{Protocol-assigned subject identifier}

\item{\code{startDate}}{Start date of the visit window (in YYYY-MM-DD format)}

\item{\code{endDate}}{End date of the visit window (in YYYY-MM-DD format)}

\item{\code{dueDate}}{Due date of the visit (in YYYY-MM-DD format), if applicable}

\item{\code{visitDate}}{Actual date the visit took place (in YYYY-MM-DD format)}

\item{\code{visitDateForm}}{Name of the form used to capture the actual visit date}

\item{\code{visitDateQuestion}}{Variable name of the field capturing the actual visit date}

\item{\code{deleted}}{Whether the visit instance is marked as deleted}

\item{\code{dateCreated}}{Date when this visit record was created}

\item{\code{dateModified}}{Date when this visit record was last modified}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-toList"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Visit as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of Visit (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert Visit to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Visit
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Visit
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Visit in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Visit
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Visit
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Visit and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Visit
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-print"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visit-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Visit-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visit$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
