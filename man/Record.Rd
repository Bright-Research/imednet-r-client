% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/record.R
\docType{class}
\name{Record}
\alias{Record}
\title{Record}
\format{
An \code{R6Class} generator object
}
\description{
Record Class

Record Class
}
\details{
Create a new Record
}
\examples{

## ------------------------------------------------
## Method `Record$toList`
## ------------------------------------------------

# convert array of Record (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{studyKey}}{Unique study key character [optional]}

\item{\code{intervalId}}{Interval ID (visit definition) that this record is associated with integer [optional]}

\item{\code{formId}}{Form ID of the form this record instance belongs to integer [optional]}

\item{\code{formKey}}{Form key of the form for this record instance character [optional]}

\item{\code{siteId}}{Site ID associated with the record integer [optional]}

\item{\code{recordId}}{Unique record ID integer [optional]}

\item{\code{recordOid}}{Client-assigned record OID character [optional]}

\item{\code{recordType}}{Type of record (e.g., SUBJECT for subject-related forms) character [optional]}

\item{\code{recordStatus}}{Current status of the record (e.g., Record Incomplete, Record Complete) character [optional]}

\item{\code{deleted}}{Whether the record is marked as deleted character [optional]}

\item{\code{dateCreated}}{Date when this record was created character [optional]}

\item{\code{dateModified}}{Date when this record was last modified character [optional]}

\item{\code{subjectId}}{Mednet subject ID that this record is associated with integer [optional]}

\item{\code{subjectOid}}{Client-assigned subject OID for the subject this record is associated with character [optional]}

\item{\code{subjectKey}}{Subject display ID that this record is associated with character [optional]}

\item{\code{visitId}}{Visit instance ID that this record is associated with (if applicable) integer [optional]}

\item{\code{parentRecordId}}{Record ID of the parent record if this record is a subrecord (if applicable) integer [optional]}

\item{\code{keywords}}{List of keywords associated with the record list(\link{Keyword}) [optional]}

\item{\code{recordData}}{Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names. named list(\link{AnyType}) [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Record-new}{\code{Record$new()}}
\item \href{#method-Record-toJSON}{\code{Record$toJSON()}}
\item \href{#method-Record-toList}{\code{Record$toList()}}
\item \href{#method-Record-toSimpleType}{\code{Record$toSimpleType()}}
\item \href{#method-Record-fromJSON}{\code{Record$fromJSON()}}
\item \href{#method-Record-toJSONString}{\code{Record$toJSONString()}}
\item \href{#method-Record-fromJSONString}{\code{Record$fromJSONString()}}
\item \href{#method-Record-validateJSON}{\code{Record$validateJSON()}}
\item \href{#method-Record-toString}{\code{Record$toString()}}
\item \href{#method-Record-isValid}{\code{Record$isValid()}}
\item \href{#method-Record-getInvalidFields}{\code{Record$getInvalidFields()}}
\item \href{#method-Record-print}{\code{Record$print()}}
\item \href{#method-Record-clone}{\code{Record$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-new"></a>}}
\if{latex}{\out{\hypertarget{method-Record-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Record class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$new(
  studyKey = NULL,
  intervalId = NULL,
  formId = NULL,
  formKey = NULL,
  siteId = NULL,
  recordId = NULL,
  recordOid = NULL,
  recordType = NULL,
  recordStatus = NULL,
  deleted = NULL,
  dateCreated = NULL,
  dateModified = NULL,
  subjectId = NULL,
  subjectOid = NULL,
  subjectKey = NULL,
  visitId = NULL,
  parentRecordId = NULL,
  keywords = NULL,
  recordData = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{studyKey}}{Unique study key}

\item{\code{intervalId}}{Interval ID (visit definition) that this record is associated with}

\item{\code{formId}}{Form ID of the form this record instance belongs to}

\item{\code{formKey}}{Form key of the form for this record instance}

\item{\code{siteId}}{Site ID associated with the record}

\item{\code{recordId}}{Unique record ID}

\item{\code{recordOid}}{Client-assigned record OID}

\item{\code{recordType}}{Type of record (e.g., SUBJECT for subject-related forms)}

\item{\code{recordStatus}}{Current status of the record (e.g., Record Incomplete, Record Complete)}

\item{\code{deleted}}{Whether the record is marked as deleted}

\item{\code{dateCreated}}{Date when this record was created}

\item{\code{dateModified}}{Date when this record was last modified}

\item{\code{subjectId}}{Mednet subject ID that this record is associated with}

\item{\code{subjectOid}}{Client-assigned subject OID for the subject this record is associated with}

\item{\code{subjectKey}}{Subject display ID that this record is associated with}

\item{\code{visitId}}{Visit instance ID that this record is associated with (if applicable)}

\item{\code{parentRecordId}}{Record ID of the parent record if this record is a subrecord (if applicable)}

\item{\code{keywords}}{List of keywords associated with the record}

\item{\code{recordData}}{Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Record-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-toList"></a>}}
\if{latex}{\out{\hypertarget{method-Record-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Record as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of Record (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-Record-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert Record to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Record-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Record
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Record
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Record-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Record in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Record-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Record
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Record
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Record-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Record and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Record-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Record
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Record-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Record-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-print"></a>}}
\if{latex}{\out{\hypertarget{method-Record-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Record-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Record-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Record$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
