% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/user.R
\docType{class}
\name{User}
\alias{User}
\title{User}
\format{
An \code{R6Class} generator object
}
\description{
User Class

User Class
}
\details{
Create a new User
}
\examples{

## ------------------------------------------------
## Method `User$toList`
## ------------------------------------------------

# convert array of User (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{userId}}{Unique user ID (UUID) character [optional]}

\item{\code{login}}{User login name character [optional]}

\item{\code{firstName}}{User first name character [optional]}

\item{\code{lastName}}{User last name character [optional]}

\item{\code{email}}{User email address character [optional]}

\item{\code{userActiveInStudy}}{Whether the user is active in the given study character [optional]}

\item{\code{roles}}{Roles that the user has in the study list(\link{Role}) [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-User-new}{\code{User$new()}}
\item \href{#method-User-toJSON}{\code{User$toJSON()}}
\item \href{#method-User-toList}{\code{User$toList()}}
\item \href{#method-User-toSimpleType}{\code{User$toSimpleType()}}
\item \href{#method-User-fromJSON}{\code{User$fromJSON()}}
\item \href{#method-User-toJSONString}{\code{User$toJSONString()}}
\item \href{#method-User-fromJSONString}{\code{User$fromJSONString()}}
\item \href{#method-User-validateJSON}{\code{User$validateJSON()}}
\item \href{#method-User-toString}{\code{User$toString()}}
\item \href{#method-User-isValid}{\code{User$isValid()}}
\item \href{#method-User-getInvalidFields}{\code{User$getInvalidFields()}}
\item \href{#method-User-print}{\code{User$print()}}
\item \href{#method-User-clone}{\code{User$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-new"></a>}}
\if{latex}{\out{\hypertarget{method-User-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new User class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$new(
  userId = NULL,
  login = NULL,
  firstName = NULL,
  lastName = NULL,
  email = NULL,
  userActiveInStudy = NULL,
  roles = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{userId}}{Unique user ID (UUID)}

\item{\code{login}}{User login name}

\item{\code{firstName}}{User first name}

\item{\code{lastName}}{User last name}

\item{\code{email}}{User email address}

\item{\code{userActiveInStudy}}{Whether the user is active in the given study}

\item{\code{roles}}{Roles that the user has in the study}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-User-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-toList"></a>}}
\if{latex}{\out{\hypertarget{method-User-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
User as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of User (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-User-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert User to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-User-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of User
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-User-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
User in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-User-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of User
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of User
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-User-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to User and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-toString"></a>}}
\if{latex}{\out{\hypertarget{method-User-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of User
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-User-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-User-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-print"></a>}}
\if{latex}{\out{\hypertarget{method-User-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-User-clone"></a>}}
\if{latex}{\out{\hypertarget{method-User-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{User$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
