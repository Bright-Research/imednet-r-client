% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_comment.R
\docType{class}
\name{QueryComment}
\alias{QueryComment}
\title{QueryComment}
\format{
An \code{R6Class} generator object
}
\description{
QueryComment Class

QueryComment Class
}
\details{
Create a new QueryComment
}
\examples{

## ------------------------------------------------
## Method `QueryComment$toList`
## ------------------------------------------------

# convert array of QueryComment (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{sequence}}{Sequence number of the comment/action in the query history integer [optional]}

\item{\code{annotationStatus}}{Status of the query after this comment (e.g., Open, Closed) character [optional]}

\item{\code{user}}{Username of the user who made the comment or action character [optional]}

\item{\code{comment}}{Text of the comment character [optional]}

\item{\code{closed}}{Whether the query was marked closed at this step character [optional]}

\item{\code{date}}{Date of the comment or action character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-QueryComment-new}{\code{QueryComment$new()}}
\item \href{#method-QueryComment-toJSON}{\code{QueryComment$toJSON()}}
\item \href{#method-QueryComment-toList}{\code{QueryComment$toList()}}
\item \href{#method-QueryComment-toSimpleType}{\code{QueryComment$toSimpleType()}}
\item \href{#method-QueryComment-fromJSON}{\code{QueryComment$fromJSON()}}
\item \href{#method-QueryComment-toJSONString}{\code{QueryComment$toJSONString()}}
\item \href{#method-QueryComment-fromJSONString}{\code{QueryComment$fromJSONString()}}
\item \href{#method-QueryComment-validateJSON}{\code{QueryComment$validateJSON()}}
\item \href{#method-QueryComment-toString}{\code{QueryComment$toString()}}
\item \href{#method-QueryComment-isValid}{\code{QueryComment$isValid()}}
\item \href{#method-QueryComment-getInvalidFields}{\code{QueryComment$getInvalidFields()}}
\item \href{#method-QueryComment-print}{\code{QueryComment$print()}}
\item \href{#method-QueryComment-clone}{\code{QueryComment$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-new"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new QueryComment class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$new(
  sequence = NULL,
  annotationStatus = NULL,
  user = NULL,
  comment = NULL,
  closed = NULL,
  date = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sequence}}{Sequence number of the comment/action in the query history}

\item{\code{annotationStatus}}{Status of the query after this comment (e.g., Open, Closed)}

\item{\code{user}}{Username of the user who made the comment or action}

\item{\code{comment}}{Text of the comment}

\item{\code{closed}}{Whether the query was marked closed at this step}

\item{\code{date}}{Date of the comment or action}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-toList"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
QueryComment as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of QueryComment (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert QueryComment to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of QueryComment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of QueryComment
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
QueryComment in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of QueryComment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of QueryComment
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to QueryComment and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-toString"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of QueryComment
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-print"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-QueryComment-clone"></a>}}
\if{latex}{\out{\hypertarget{method-QueryComment-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{QueryComment$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
