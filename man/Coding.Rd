% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coding.R
\docType{class}
\name{Coding}
\alias{Coding}
\title{Coding}
\format{
An \code{R6Class} generator object
}
\description{
Coding Class

Coding Class
}
\details{
Create a new Coding
}
\examples{

## ------------------------------------------------
## Method `Coding$toList`
## ------------------------------------------------

# convert array of Coding (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{studyKey}}{Unique study key character [optional]}

\item{\code{siteName}}{Name of the site associated with the coded data character [optional]}

\item{\code{siteId}}{Site ID associated with the coded data integer [optional]}

\item{\code{subjectId}}{Subject ID associated with the coded data integer [optional]}

\item{\code{subjectKey}}{Subject key (display ID) associated with the coded data character [optional]}

\item{\code{formId}}{Form ID where the coded data originates integer [optional]}

\item{\code{formName}}{Name of the form where the coded data originates character [optional]}

\item{\code{formKey}}{Form key where the coded data originates character [optional]}

\item{\code{revision}}{Revision number of the coding entry integer [optional]}

\item{\code{recordId}}{Record ID associated with the coded data integer [optional]}

\item{\code{variable}}{Variable name (field) that was coded character [optional]}

\item{\code{value}}{Original value entered that required coding character [optional]}

\item{\code{codingId}}{Mednet coding ID integer [optional]}

\item{\code{code}}{Standardized code assigned (e.g., dictionary term) character [optional]}

\item{\code{codedBy}}{Name of the user who performed the coding character [optional]}

\item{\code{reason}}{Reason for coding or any notes on changes character [optional]}

\item{\code{dictionaryName}}{Name of the dictionary used (e.g., MedDRA) character [optional]}

\item{\code{dictionaryVersion}}{Version of the dictionary used character [optional]}

\item{\code{dateCoded}}{Date when the coding was performed character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Coding-new}{\code{Coding$new()}}
\item \href{#method-Coding-toJSON}{\code{Coding$toJSON()}}
\item \href{#method-Coding-toList}{\code{Coding$toList()}}
\item \href{#method-Coding-toSimpleType}{\code{Coding$toSimpleType()}}
\item \href{#method-Coding-fromJSON}{\code{Coding$fromJSON()}}
\item \href{#method-Coding-toJSONString}{\code{Coding$toJSONString()}}
\item \href{#method-Coding-fromJSONString}{\code{Coding$fromJSONString()}}
\item \href{#method-Coding-validateJSON}{\code{Coding$validateJSON()}}
\item \href{#method-Coding-toString}{\code{Coding$toString()}}
\item \href{#method-Coding-isValid}{\code{Coding$isValid()}}
\item \href{#method-Coding-getInvalidFields}{\code{Coding$getInvalidFields()}}
\item \href{#method-Coding-print}{\code{Coding$print()}}
\item \href{#method-Coding-clone}{\code{Coding$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-new"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Coding class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$new(
  studyKey = NULL,
  siteName = NULL,
  siteId = NULL,
  subjectId = NULL,
  subjectKey = NULL,
  formId = NULL,
  formName = NULL,
  formKey = NULL,
  revision = NULL,
  recordId = NULL,
  variable = NULL,
  value = NULL,
  codingId = NULL,
  code = NULL,
  codedBy = NULL,
  reason = NULL,
  dictionaryName = NULL,
  dictionaryVersion = NULL,
  dateCoded = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{studyKey}}{Unique study key}

\item{\code{siteName}}{Name of the site associated with the coded data}

\item{\code{siteId}}{Site ID associated with the coded data}

\item{\code{subjectId}}{Subject ID associated with the coded data}

\item{\code{subjectKey}}{Subject key (display ID) associated with the coded data}

\item{\code{formId}}{Form ID where the coded data originates}

\item{\code{formName}}{Name of the form where the coded data originates}

\item{\code{formKey}}{Form key where the coded data originates}

\item{\code{revision}}{Revision number of the coding entry}

\item{\code{recordId}}{Record ID associated with the coded data}

\item{\code{variable}}{Variable name (field) that was coded}

\item{\code{value}}{Original value entered that required coding}

\item{\code{codingId}}{Mednet coding ID}

\item{\code{code}}{Standardized code assigned (e.g., dictionary term)}

\item{\code{codedBy}}{Name of the user who performed the coding}

\item{\code{reason}}{Reason for coding or any notes on changes}

\item{\code{dictionaryName}}{Name of the dictionary used (e.g., MedDRA)}

\item{\code{dictionaryVersion}}{Version of the dictionary used}

\item{\code{dateCoded}}{Date when the coding was performed}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
Convert to an R object. This method is deprecated. Use `toSimpleType()` instead.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$toJSON()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-toList"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-toList}{}}}
\subsection{Method \code{toList()}}{
Convert to a List

Convert the R6 object to a list to work more easily with other tooling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$toList()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Coding as a base R list.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# convert array of Coding (x) to a data frame
\dontrun{
library(purrr)
library(tibble)
df <- x |> map(\(y)y$toList()) |> map(as_tibble) |> list_rbind()
df
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-toSimpleType"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-toSimpleType}{}}}
\subsection{Method \code{toSimpleType()}}{
Convert Coding to a base R type
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$toSimpleType()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A base R type, e.g. a list or numeric/character array.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Coding
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Coding
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$toJSONString(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed to `jsonlite::toJSON`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Coding in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Coding
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Coding
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Coding and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Coding
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-print"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Coding-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Coding-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Coding$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
